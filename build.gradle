plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.aws.rest.api'
version = '1.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

	// database dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'

	// dev tools only for dev
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Use Hibernate 5.x for javax.persistence compatibility
	//implementation 'org.hibernate:hibernate-core:5.6.15.Final'

	// Lombok dependency
	compileOnly 'org.projectlombok:lombok:1.18.24'   // Use the latest version available
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
}


tasks.named('test') {
	useJUnitPlatform()
}

/*publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java // Publish the Java JAR
		}
	}
	repositories {
		maven {
			// Use Nexus repository for publishing
			name = "Nexus"
			url = uri("http://<NEXUS_SERVER_IP>:8081/repository/<REPOSITORY_NAME>/") // Replace with your Nexus URL
			credentials {
				username = project.findProperty("nexusUsername") ?: "your-username" // Replace or use Gradle properties
				password = project.findProperty("nexusPassword") ?: "your-password" // Replace or use Gradle properties
			}
		}
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = group
			artifactId = rootProject.name
			version = version
			from components.java

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			pom {
				name = rootProject.name
				description = 'This is the domain service in counter party responsible for master data management and related domain operations.'
				licenses {
					license {
						name = "IKANO BANK License, Version ${version}"
						url = 'https://ikanobank.se/'
					}
				}
			}
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "https://artifacts.le.tnt.bank.ikano/repository/maven-releases/"
			def snapshotsRepoUrl = "https://artifacts.le.tnt.bank.ikano/repository/maven-snapshots/"
			credentials {
				username nexusUsername
				password nexusPassword
			}
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}
*/