name: CI/CD Pipeline for Java Gradle with Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set permissions for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 2. Set up JDK and Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. Build the Application
      - name: Build JAR with Gradle
        run: ./gradlew clean build

      - name: List Build Directory
        run: ls -R build/libs

      # 4. Archive Build Artifact
      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: aws-demo-jar
          path: build/libs/*.jar

  docker:
    runs-on: ubuntu-24.04
    needs: build

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Download JAR Artifact
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: aws-demo-jar

      # 3. Verify JAR Artifact
      - name: Verify JAR Artifact
        run: ls -R

      # 4. Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Build Docker Image
      #- name: Build Docker Image
      #  run: docker build -t 7829099824/aws-repo:latest .
      # Update Build Step with Build Argument
      - name: Build Docker Image
        run: docker build --build-arg JAR_FILE=aws-demo-0.0.1-SNAPSHOT.jar -t 7829099824/aws-repo:latest .

      # 6. Push Docker Image to DockerHub
      - name: Push Docker Image to DockerHub
        run: docker push 7829099824/aws-repo:latest

  deploy:
    runs-on: ubuntu-24.04
    needs: docker

    steps:
      # 1. Set up AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 2. Install eksctl
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      # 3. Create Kubernetes Cluster
      - name: Create EKS Cluster
        run: |
          eksctl create cluster \
            --name aws-demo-cluster \
            --region us-east-1 \
            --nodes 2

      # 4. Set up kubectl for Kubernetes
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      # verify kubernetes manifests
      - name: Verify Kubernetes Manifests
        run: ls -R k8s/

      # 5. Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
